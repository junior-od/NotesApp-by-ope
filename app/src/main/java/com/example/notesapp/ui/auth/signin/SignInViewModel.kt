package com.example.notesapp.ui.auth.signin

import android.util.Log
import androidx.credentials.Credential
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.notesapp.data.constants.user.UserConstants
import com.example.notesapp.data.user.User
import com.example.notesapp.domain.user.CreateUserUseCase
import com.example.notesapp.domain.user.SignInUseCase
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext

/**
 * Sign in view model to act
 * as a middle man communication between
 * ui and data needed for the sign in flow
 * */
class SignInViewModel(
    private val signInUseCase: SignInUseCase,
    private val createUserUseCase: CreateUserUseCase
): ViewModel() {

    /**
     * to observe ui states
     * */
    sealed class SignInUi {
        data object Loading: SignInUi()
        data object Success: SignInUi()
        data class Error(val message: String) : SignInUi()
    }

    private var _signInUiState = MutableStateFlow<SignInUi?>(null)
    val signInUiState get() = _signInUiState

    private var _email = MutableStateFlow(
        ""
    )

    val email get() = _email

    private var _password = MutableStateFlow(
        ""
    )

    val password get() = _password

    private var _passwordVisible = MutableStateFlow(
        false
    )

    val passwordVisible get() = _passwordVisible

    /**
     * reset signInUi State
     * */
    fun resetSignInUiState() {
        _signInUiState.value = null
    }

    /**
     * update error state signInUi
     * */
    fun updateErrorSignInUiState(message: String = "") {
        _signInUiState.value = SignInUi.Error(message)
    }

    /**
     * update email
     *
     * @param email: expects email
     * */
    fun updateEmail(email: String) {
        _email.value = email
    }

    /**
     * update password
     *
     * @param password: expects password
     * */
    fun updatePassword(password: String) {
        _password.value = password
    }

    /**
     * update password visibility
     * */
    fun updatePasswordVisible() {
        _passwordVisible.value = !_passwordVisible.value
    }

    /**
     * sign in user
     * */
    suspend fun signInUser(){
        viewModelScope.launch {
            // update state as loading
            _signInUiState.value = SignInUi.Loading

            signInUseCase(
                email = _email.value,
                password = _password.value,
                signInMethod = UserConstants.SignUpMethods.EMAIL_PASSWORD,
                onResultCallback = {
                        result, isSuccessful ->

                    if (isSuccessful) {
                        viewModelScope.launch {
                            // observe changes and send to ui
                            // update state as sign up successful
                            _signInUiState.value = SignInUi.Success
                        }
                    } else {
                        // observe changes and send to ui
                        // update state as Error occurred
                        _signInUiState.value = SignInUi.Error(result)
                    }

                }
            )
        }

    }

    /**
     * sign in user with google
     * */
    suspend fun signInUserWithGoogle(credential: Credential){
        viewModelScope.launch {
            // update state as loading
            _signInUiState.value = SignInUi.Loading

            signInUseCase(
                credential = credential,
                signInMethod = UserConstants.SignUpMethods.GOOGLE,
                onResultCallback = {
                        result, _ ->

                    // observe changes and send to ui
                    // update state as Error occurred
                    _signInUiState.value = SignInUi.Error(result)

                },
                onGoogleSignInCallBack = {
                        user, _ ->
                    viewModelScope.launch {

                        // save user info to db
                        saveUser(
                            userId = user?.uid.toString(),
                            user = User(
                                id = "",
                                firstName = user?.displayName.toString(),
                                email = user?.email.toString()
                            )
                        )

                        // observe changes and send to ui
                        // update state as sign up successful
                        _signInUiState.value = SignInUi.Success
                    }
                }
            )
        }

    }

    /**
     * save user into db
     *
     * @param userId expects user id generated by firebase on sign in successful
     * @param user expects user new record template
     * */
    private suspend fun saveUser(userId: String, user: User){
        withContext(Dispatchers.IO){
            createUserUseCase(
                userId = userId,
                user = user,
                signUpMethod = UserConstants.SignUpMethods.GOOGLE
            )
        }

    }
}